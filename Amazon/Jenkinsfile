pipeline {
    agent any

    tools {
        maven 'Maven3'  // Make sure 'Maven3' is defined in Jenkins Global Tool Configuration
    }

    environment {
        SONAR_TOKEN = credentials('sonarqube-k') // SonarQube token stored in Jenkins
    }

    stages {

        stage('Checkout') {
            steps {
                // Checkout the Git repository
                git url: 'https://github.com/kavi-1501/devops-batch11.git', branch: 'main'
            }
        }

        stage('Build WAR with Maven') {
            steps {
                // Navigate to Maven project directory
                dir('Amazon/Amazon-Core') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Amazon/Amazon-Core') {
                    withSonarQubeEnv('sonarqube') { // 'sonarqube' must match your Jenkins SonarQube server name
                        sh 'mvn sonar:sonar -Dsonar.projectKey=devops_git'
                    }
                }
            }
        }

        stage('Check Quality Gate') {
            steps {
                script {
                    // Wait a few seconds if needed for SonarQube to finish analysis
                    sleep 5
                    def response = sh(
                        script: """curl -s -u $SONAR_TOKEN: "http://localhost:9000/api/qualitygates/project_status?projectKey=devops_git" """,
                        returnStdout: true
                    ).trim()
                    echo "SonarQube Response: ${response}"

                    if (!response.contains('"status":"OK"')) {
                        error "‚ùå Quality Gate failed!"
                    } else {
                        echo "‚úÖ Quality Gate passed!"
                    }
                }
            }
        }

        stage('Deploy with Ansible') {
            steps {
                dir('Amazon/ansible') {
                    sh 'ansible-playbook -i inventory.ini playbook.yml'
                }
            }
        }
    }

    post {
        success {
            echo "üéâ Pipeline completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed!"
        }
    }
}
